{"code":"import { GLTFUtil, LoggerVerbosity } from 'gltf-transform';\r\nimport splice from 'buffer-splice';\r\nvar split = function (container, meshes) {\r\n    var json = container.json;\r\n    var logger = GLTFUtil.createLogger('gltf-transform-split', LoggerVerbosity.INFO);\r\n    // Create Buffer instances.\r\n    json.buffers.forEach(function (buffer, bufferIndex) {\r\n        if (buffer.uri && buffer.uri.match(/^data:/)) {\r\n            var uri = buffer.uri;\r\n            buffer.uri = \"buffer\" + bufferIndex + \".bin\";\r\n            buffer['_buffer'] = GLTFUtil.createBufferFromDataURI(uri);\r\n            return;\r\n        }\r\n        throw new Error('Only buffers using Data URIs are currently supported');\r\n    });\r\n    var bufferViewMap = {};\r\n    // Group bufferviews by mesh.\r\n    json.meshes.forEach(function (mesh) {\r\n        if (meshes.indexOf(mesh.name) === -1)\r\n            return;\r\n        mesh.primitives.forEach(function (prim) {\r\n            if (prim.indices)\r\n                markAccessor(json.accessors[prim.indices]);\r\n            Object.keys(prim.attributes).forEach(function (attrName) {\r\n                markAccessor(json.accessors[prim.attributes[attrName]]);\r\n            });\r\n            function markAccessor(accessor) {\r\n                var bufferView = json.bufferViews[accessor.bufferView];\r\n                if (bufferViewMap[accessor.bufferView] === undefined) {\r\n                    bufferViewMap[accessor.bufferView] = mesh.name;\r\n                }\r\n                else if (bufferViewMap[accessor.bufferView] !== mesh.name) {\r\n                    throw new Error('Not implemented: Two meshes share a bufferview.');\r\n                }\r\n            }\r\n            ;\r\n        });\r\n    });\r\n    // Write data for each mesh to a new buffer.\r\n    meshes.forEach(function (meshName) {\r\n        var buffer = GLTFUtil.createBuffer();\r\n        logger.info(\"\\uD83D\\uDCE6  \" + meshName);\r\n        json.bufferViews.forEach(function (bufferView, bufferViewIndex) {\r\n            if (bufferViewMap[bufferViewIndex] !== meshName)\r\n                return;\r\n            logger.info(meshName + ':' + bufferViewIndex);\r\n            // Extract data from original buffer.\r\n            logger.info(\"original before: \" + json.buffers[bufferView.buffer]['_buffer'].byteLength + \" w/ offset \" + bufferView.byteOffset + \" and length \" + bufferView.byteLength);\r\n            var spliceOpts = { buffer: json.buffers[bufferView.buffer]['_buffer'] };\r\n            var tmp = splice(spliceOpts, bufferView.byteOffset, bufferView.byteLength);\r\n            logger.info(\"spliced: \" + tmp.byteLength);\r\n            json.buffers[bufferView.buffer]['_buffer'] = spliceOpts.buffer;\r\n            logger.info(\"original after: \" + json.buffers[bufferView.buffer]['_buffer'].byteLength);\r\n            // Write data to new buffer.\r\n            var affectedByteOffset = bufferView.byteOffset + bufferView.byteLength;\r\n            var affectedBuffer = bufferView.buffer;\r\n            bufferView.byteOffset = buffer.byteLength;\r\n            bufferView.buffer = json.buffers.length;\r\n            buffer = splice(buffer, null, null, tmp);\r\n            // Update remaining buffers.\r\n            json.bufferViews.forEach(function (affectedBufferView) {\r\n                if (affectedBufferView.buffer === affectedBuffer\r\n                    && affectedBufferView.byteOffset >= affectedByteOffset) {\r\n                    affectedBufferView.byteOffset -= bufferView.byteLength;\r\n                }\r\n            });\r\n            // TODO: Update embedded images, or throw an error.\r\n        });\r\n        var meshBuffer = { uri: meshName + \".bin\", byteLength: undefined };\r\n        meshBuffer['_buffer'] = buffer;\r\n        json.buffers.push(meshBuffer);\r\n    });\r\n    // Filter out empty buffers.\r\n    json.buffers = json.buffers.filter(function (buffer, bufferIndex) {\r\n        buffer.byteLength = buffer['_buffer'].byteLength;\r\n        delete buffer['_buffer'];\r\n        if (buffer.byteLength > 0)\r\n            return true;\r\n        json.bufferViews.forEach(function (bufferView) {\r\n            if (bufferView.buffer >= bufferIndex)\r\n                bufferView.buffer--;\r\n        });\r\n        return false;\r\n    });\r\n    return container;\r\n};\r\nexport { split };\r\n","dts":{"name":"/Users/donmccurdy/Documents/Projects/glTF-Transform/packages/gltf-transform-split/index.d.ts","text":"import { GLTFContainer } from 'gltf-transform';\r\ndeclare const split: (container: GLTFContainer, meshes: string[]) => GLTFContainer;\r\nexport { split };\r\n"}}
