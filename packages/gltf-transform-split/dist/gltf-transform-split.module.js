import{GLTFUtil as e,LoggerVerbosity as f}from"gltf-transform";import r from"buffer-splice";var t=function(t,u){var n=t.json,b=e.createLogger("gltf-transform-split",f.INFO);n.buffers.forEach(function(f,r){if(f.uri&&f.uri.match(/^data:/)){var t=f.uri;return f.uri="buffer"+r+".bin",void(f._buffer=e.createBufferFromDataURI(t))}throw new Error("Only buffers using Data URIs are currently supported")});var i={};return n.meshes.forEach(function(e){-1!==u.indexOf(e.name)&&e.primitives.forEach(function(f){function r(f){if(void 0===i[f.bufferView])i[f.bufferView]=e.name;else if(i[f.bufferView]!==e.name)throw new Error("Not implemented: Two meshes share a bufferview.")}f.indices&&r(n.accessors[f.indices]),Object.keys(f.attributes).forEach(function(e){r(n.accessors[f.attributes[e]])})})}),u.forEach(function(f){var t=e.createBuffer();b.info("ðŸ“¦  "+f),n.bufferViews.forEach(function(e,u){if(i[u]===f){b.info(f+":"+u),b.info("original before: "+n.buffers[e.buffer]._buffer.byteLength+" w/ offset "+e.byteOffset+" and length "+e.byteLength);var o={buffer:n.buffers[e.buffer]._buffer},s=r(o,e.byteOffset,e.byteLength);b.info("spliced: "+s.byteLength),n.buffers[e.buffer]._buffer=o.buffer,b.info("original after: "+n.buffers[e.buffer]._buffer.byteLength);var a=e.byteOffset+e.byteLength,c=e.buffer;e.byteOffset=t.byteLength,e.buffer=n.buffers.length,t=r(t,null,null,s),n.bufferViews.forEach(function(f){f.buffer===c&&f.byteOffset>=a&&(f.byteOffset-=e.byteLength)})}});var u={uri:f+".bin",byteLength:void 0};u._buffer=t,n.buffers.push(u)}),n.buffers=n.buffers.filter(function(e,f){return e.byteLength=e._buffer.byteLength,delete e._buffer,e.byteLength>0||(n.bufferViews.forEach(function(e){e.buffer>=f&&e.buffer--}),!1)}),t};export{t as split};
//# sourceMappingURL=gltf-transform-split.module.js.map
