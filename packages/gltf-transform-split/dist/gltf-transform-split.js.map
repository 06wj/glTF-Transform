{"version":3,"file":"gltf-transform-split.js","sources":["../src/index.ts"],"sourcesContent":["import { GLTFContainer, GLTFUtil, LoggerVerbosity } from 'gltf-transform-util';\n\nconst splice = (buffer: ArrayBuffer, begin: number, count: number): Array<ArrayBuffer> => {\n  const a1 = buffer.slice(0, begin);\n  const a2 = buffer.slice(begin + count);\n  const a = join(a1, a2);\n  const b = buffer.slice(begin, begin + count);\n  return [a, b];\n};\n\nconst join = (a: ArrayBuffer, b: ArrayBuffer): ArrayBuffer => {\n  const out = new Uint8Array(a.byteLength + b.byteLength);\n  out.set(new Uint8Array(a), 0);\n  out.set(new Uint8Array(b), a.byteLength);\n  return out.buffer;\n}\n\nconst split = function (container: GLTFContainer, meshes: Array<string>): GLTFContainer {\n\n  const json = container.json;\n  const logger = GLTFUtil.createLogger('gltf-transform-split', LoggerVerbosity.INFO);\n\n  // Create Buffer instances.\n  json.buffers.forEach((buffer, bufferIndex) => {\n    if (buffer.uri && buffer.uri.match(/^data:/)) {\n      const uri = buffer.uri;\n      buffer.uri = `buffer${bufferIndex}.bin`;\n      buffer['_buffer'] = GLTFUtil.createBufferFromDataURI(uri);\n      return;\n    }\n    throw new Error('Only buffers using Data URIs are currently supported');\n  });\n\n  const bufferViewMap = {};\n\n  // Group bufferviews by mesh.\n  json.meshes.forEach((mesh) => {\n    if (meshes.indexOf(mesh.name) === -1) return;\n    mesh.primitives.forEach((prim) => {\n      if (prim.indices) markAccessor(json.accessors[prim.indices]);\n      Object.keys(prim.attributes).forEach((attrName) => {\n        markAccessor(json.accessors[prim.attributes[attrName]]);\n      });\n\n      function markAccessor(accessor) {\n        const bufferView = json.bufferViews[accessor.bufferView];\n        if (bufferViewMap[accessor.bufferView] === undefined) {\n          bufferViewMap[accessor.bufferView] = mesh.name;\n        } else if (bufferViewMap[accessor.bufferView] !== mesh.name) {\n          throw new Error('Not implemented: Two meshes share a bufferview.');\n        }\n      };\n    });\n  });\n\n  // Write data for each mesh to a new buffer.\n  meshes.forEach((meshName) => {\n    let buffer = GLTFUtil.createBuffer();\n\n    logger.info(`ðŸ“¦  ${meshName}`);\n\n    json.bufferViews.forEach((bufferView, bufferViewIndex) => {\n      if (bufferViewMap[bufferViewIndex] !== meshName) return;\n      logger.info(meshName + ':' + bufferViewIndex);\n\n      // Extract data from original buffer.\n      logger.info(`original before: ${json.buffers[bufferView.buffer]['_buffer'].byteLength} w/ offset ${bufferView.byteOffset} and length ${bufferView.byteLength}`);\n      const [ original, tmp ] = splice(json.buffers[bufferView.buffer]['_buffer'], bufferView.byteOffset, bufferView.byteLength);\n      logger.info(`spliced: ${tmp.byteLength}`);\n      json.buffers[bufferView.buffer]['_buffer'] = original;\n      logger.info(`original after: ${json.buffers[bufferView.buffer]['_buffer'].byteLength}`);\n\n      // Write data to new buffer.\n      const affectedByteOffset = bufferView.byteOffset + bufferView.byteLength;\n      const affectedBuffer = bufferView.buffer;\n      bufferView.byteOffset = buffer.byteLength;\n      bufferView.buffer = json.buffers.length;\n      buffer = join(buffer, tmp);\n\n      // Update remaining buffers.\n      json.bufferViews.forEach((affectedBufferView) => {\n        if (affectedBufferView.buffer === affectedBuffer\n          && affectedBufferView.byteOffset >= affectedByteOffset) {\n          affectedBufferView.byteOffset -= bufferView.byteLength;\n        }\n      });\n      // TODO: Update embedded images, or throw an error.\n    });\n\n    const meshBuffer = { uri: `${meshName}.bin`, byteLength: undefined } as GLTF.IBuffer;\n    meshBuffer['_buffer'] = buffer;\n    json.buffers.push(meshBuffer);\n  });\n\n  // Filter out empty buffers.\n  json.buffers = json.buffers.filter((buffer, bufferIndex) => {\n    buffer.byteLength = buffer['_buffer'].byteLength;\n    delete buffer['_buffer'];\n    if (buffer.byteLength > 0) return true;\n    json.bufferViews.forEach((bufferView) => {\n      if (bufferView.buffer >= bufferIndex) bufferView.buffer--;\n    });\n    return false;\n  });\n\n  return container;\n}\n\nconst test = 'test';\n\nexport { split, test };\n"],"names":["GLTFUtil","LoggerVerbosity"],"mappings":"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"}